server:
  port: 10010


# gateway网关中增加SSL验证，
#  ssl:
#    key-store: classpath:server.p12
#    key-store-password: 123456
#    key-store-type: PKCS12

spring:
  application:
    name: gateway


  redis:
    host: 10.67.110.146
    port: 6379

  cloud:
    nacos:
      server-addr: localhost:8848

    gateway:
      routes:
        - id: adminService
          uri: lb://adminService
          predicates:
            - Path=/admin/**


        - id: businessService
          uri: lb://businessService
          predicates:
            - Path=/business/**


        - id: userService
          uri: lb://userService
          predicates:
            - Path=/user/**
#          filters:
#            - name: IPRangeFilterFactory


            #          filters:
#            - RewritePath=/user/(?<segment>.*), /$\{segment}
#            - SetPath=/user/**
#            - SecureHeaders
#            - SSL=force

#实现基于单个服务的JWT验证
#          filters:
#            - name: JWTGatewayFilterFactory



#  基于单个服务的漏桶算法
#          filters:
#            - name: LeakBucketFilterFactory

##对单个服务进行redis缓存，实现流量限制
#          filters:
#            - name: RedisFilterFactory

            #对请求进行限制，令牌桶策略
#          filters:
#            - name: RequestRateLimiter #请求数限流 名字不能随便写
#              args:
#                key-resolver: "#{@ipKeyResolver}"
#                redis-rate-limiter.replenishRate: 1 #令牌桶每秒填充平均速率，
#                redis-rate-limiter.burstCapacity: 1 #令牌桶总容量


#           1.增加以下标注可以实现IP白名单策略
#           - RemoteAddr=127.0.0.1, 192.168.0.1, 10.67.110.146, 0:0:0:0:0:0:0:1

#           2.通过以下过滤器实现IP的白名单访问策略
#          filters:
#            - name: IPWhiteListFilterFactory

#            3.通过以下过滤器实现IP的黑名单访问策略
#          filters:
#            - name: IPBlackListFilterFactory

#            4.通过以下过滤器实现IP的地址段访问策略
#          filters:
#             - name: IPRangeFilterFactory


      default-filters: #默认过滤器，对所有路由生效

      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: # 允许哪些网站的跨域请求
              - "http://localhost:3000"
            allowedMethods: # 允许的跨域ajax的请求方式
              - "GET"
              - "POST"
              - "DELETE"
              - "PUT"
              - "OPTIONS"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            exposedHeaders:
              - "Access-Control-Allow-Origin"
            maxAge: 360000 # 这次跨域检测的有效期

LeakBucketGlobalFilter:
  args:
    capacity: 2 #表示请求的最大容量
    leakRate: 1 #表示每秒移出的请求数量，每秒处理一个请求，如果超过多个则

Jwt:
  args:
    userId: 12345
    username: John Doe

IP:
  Range:
    ipStart: 10.67.110.0
    ipEnd: 10.67.110.14
  WhiteList: 127.0.0.1,192.168.0.1,10.67.110.146 ,0:0:0:0:0:0:0:1
  blackList: 192.168.0.1,10.67.110.146 ,0:0:0:0:0:0:0:1

SSL:
  key:
    password: 123456

feign:
  httpclient:
    enableSSL: true

